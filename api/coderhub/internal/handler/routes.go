// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"net/http"

	academic_auth "coderhub/api/coderhub/internal/handler/academic_auth"
	academic_public "coderhub/api/coderhub/internal/handler/academic_public"
	follow_auth "coderhub/api/coderhub/internal/handler/follow_auth"
	follow_public "coderhub/api/coderhub/internal/handler/follow_public"
	image_auth "coderhub/api/coderhub/internal/handler/image_auth"
	image_public "coderhub/api/coderhub/internal/handler/image_public"
	user_auth "coderhub/api/coderhub/internal/handler/user_auth"
	user_public "coderhub/api/coderhub/internal/handler/user_public"
	"coderhub/api/coderhub/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 新增学术导航
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: academic_auth.AddAcademicNavigatorHandler(serverCtx),
			},
			{
				// 删除学术导航
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: academic_auth.DeleteAcademicNavigatorHandler(serverCtx),
			},
			{
				// 取消点赞学术导航
				Method:  http.MethodDelete,
				Path:    "/dislike/:id",
				Handler: academic_auth.CancelLikeAcademicNavigatorHandler(serverCtx),
			},
			{
				// 点赞学术导航
				Method:  http.MethodPost,
				Path:    "/like/:id",
				Handler: academic_auth.PostAcademicNavigatorLikeHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/academic_navigator"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取学术导航
				Method:  http.MethodGet,
				Path:    "/get",
				Handler: academic_public.GetAcademicNavigatorHandler(serverCtx),
			},
			{
				// 健康检查
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: academic_public.AcademicHealthHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/academic_navigator"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 关注用户
				Method:  http.MethodPost,
				Path:    "/follow",
				Handler: follow_auth.FollowUserHandler(serverCtx),
			},
			{
				// 取消关注
				Method:  http.MethodPost,
				Path:    "/unfollow",
				Handler: follow_auth.UnfollowUserHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/follow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 获取粉丝列表
				Method:  http.MethodGet,
				Path:    "/fans",
				Handler: follow_public.GetFansListHandler(serverCtx),
			},
			{
				// 健康检查
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: follow_public.FollowHealthHandler(serverCtx),
			},
			{
				// 获取关注列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: follow_public.GetFollowListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/follow"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 删除图片
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: image_auth.DeleteHandler(serverCtx),
			},
			{
				// 获取图片信息
				Method:  http.MethodGet,
				Path:    "/get/:image_id",
				Handler: image_auth.GetHandler(serverCtx),
			},
			{
				// 获取用户图片列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: image_auth.ListByUserHandler(serverCtx),
			},
			{
				// 上传图片
				Method:  http.MethodPost,
				Path:    "/upload",
				Handler: image_auth.UploadHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/image"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 健康检查
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: image_public.ImageHealthHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/image"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 修改密码
				Method:  http.MethodPost,
				Path:    "/change-password",
				Handler: user_auth.ChangePasswordHandler(serverCtx),
			},
			{
				// 删除用户
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: user_auth.DeleteUserHandler(serverCtx),
			},
			{
				// 重置密码
				Method:  http.MethodPost,
				Path:    "/reset-password",
				Handler: user_auth.ResetPasswordHandler(serverCtx),
			},
			{
				// 更新用户信息
				Method:  http.MethodPut,
				Path:    "/update/:id",
				Handler: user_auth.UpdateUserInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 健康检查
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: user_public.UserHealthHandler(serverCtx),
			},
			{
				// 获取用户信息
				Method:  http.MethodGet,
				Path:    "/info/:id",
				Handler: user_public.GetUserInfoHandler(serverCtx),
			},
			{
				// 获取用户列表
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: user_public.GetUserListHandler(serverCtx),
			},
			{
				// 用户登录
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user_public.LoginHandler(serverCtx),
			},
			{
				// 用户注册
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: user_public.RegisterHandler(serverCtx),
			},
			{
				// 通过链接重置密码
				Method:  http.MethodPost,
				Path:    "/reset-password-by-link",
				Handler: user_public.ResetPasswordByLinkHandler(serverCtx),
			},
			{
				// 发送重置密码链接
				Method:  http.MethodPost,
				Path:    "/send-reset-password-link",
				Handler: user_public.SendResetPasswordLinkHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/user"),
	)
}
