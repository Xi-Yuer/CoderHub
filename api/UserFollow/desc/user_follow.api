// goctl api go -api user_follow.api -dir ../
// goctl api plugin -plugin goctl-swagger="swagger -filename user_follow.json" -api user_follow.api -dir .
syntax = "v1"

info (
	title:   "用户关注服务接口"
	desc:    "提供用户关注、取消关注、查询关注列表、查询粉丝列表、检查是否关注等功能"
	author:  "Xi-Yuer"
	version: "1.0.0"
)

type (
	// 统一响应格式
	Response {
		Code    int32  `json:"code"` // 状态码
		Message string `json:"message"` // 提示信息
	}
)

// 创建关注关系请求
type CreateUserFollowReq {
	FollowedId int64 `json:"followed_id"` // 被关注者ID
}

type CreateUserFollowResp {
	Response
	Data bool `json:"data"` // 操作是否成功
}

// 取消关注请求
type DeleteUserFollowReq {
	FollowedId int64 `json:"followed_id"` // 被取消关注者ID
}

type DeleteUserFollowResp {
	Response
	Data bool `json:"data"` // 操作是否成功
}

// 获取用户关注列表请求
type GetUserFollowsReq {
	UserId   int64 `json:"user_id"` // 用户ID
	Page     int32 `json:"page"` // 页码
	PageSize int32 `json:"page_size"` // 每页数量
}

type GetUserFollowsResp {
	Response
	Data *UserFollowList `json:"data"`
}

// 获取用户粉丝列表请求
type GetUserFansReq {
	UserId   int64 `json:"user_id"` // 用户ID
	Page     int32 `json:"page"` // 页码
	PageSize int32 `json:"page_size"` // 每页数量
}

type GetUserFansResp {
	Response
	Data *UserFollowedList `json:"data"`
}

// 检查是否关注请求
type IsUserFollowedReq {
	FollowedId int64 `json:"followed_id"` // 被关注者ID
}

type IsUserFollowedResp {
	Response
	Data bool `json:"data"` // 是否已关注
}

type GetMutualFollowsResp {
	Response
	Data *UserFollowList `json:"data"`
}

type UserFollowInfo {
	UserId   int64  `json:"user_id"` // 用户ID
	Username string `json:"username"` // 用户名
	Avatar   string `json:"avatar"` // 头像
}

type UserFollowList {
	List  []UserFollowInfo `json:"list"` // 列表
	Total int64            `json:"total"` // 总数
}

type UserFollowedList {
	List  []UserFollowInfo `json:"list"` // 列表
	Total int64            `json:"total"` // 总数
}

type HealthResponse {
	Response
}

@server (
	prefix: /api/user_follow
)
service UserFollow {
	@doc (
		summary: "健康检查"
	)
	@handler Health
	get /health returns (HealthResponse)

	@doc (
		summary: "获取用户关注列表"
	)
	@handler GetUserFollows
	get /get_user_follows (GetUserFollowsReq) returns (GetUserFollowsResp)

	@doc (
		summary: "获取用户粉丝列表"
	)
	@handler GetUserFans
	get /get_user_fans (GetUserFansReq) returns (GetUserFansResp)
}

@server (
	jwt:    Auth
	prefix: /api/user_follow
)
service UserFollow {
	@doc (
		summary: "创建关注关系"
	)
	@handler CreateUserFollow
	post /create_user_follow (CreateUserFollowReq) returns (CreateUserFollowResp)

	@doc (
		summary: "取消关注"
	)
	@handler DeleteUserFollow
	post /delete_user_follow (DeleteUserFollowReq) returns (DeleteUserFollowResp)

	@doc (
		summary: "检查是否关注"
	)
	@handler IsUserFollowed
	post /is_user_followed (IsUserFollowedReq) returns (IsUserFollowedResp)

	@doc (
		summary: "获取互相关注列表"
	)
	@handler GetMutualFollows
	get /get_mutual_follows returns (GetMutualFollowsResp)
}

