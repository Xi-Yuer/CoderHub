// goctl api go -api user_follow.api -dir ../
// goctl api plugin -plugin goctl-swagger="swagger -filename user_follow.json" -api user_follow.api -dir .

syntax = "v1"

info (
	title:   "用户关注服务接口"
	desc:    "提供用户关注、取消关注、查询关注列表、查询粉丝列表、检查是否关注等功能"
	author:  "Xi-Yuer"
	version: "1.0.0"
)

type (
	// 统一响应格式
	Response {
		Code    int32  `json:"code"` // 状态码
		Message string `json:"message"` // 提示信息
	}
)

// 创建关注关系请求
type CreateUserFollowReq {
    UserId int64 `json:"user_id"`         // 关注者ID
    FollowedId int64 `json:"followed_id"` // 被关注者ID
}

type CreateUserFollowResp {
    Success bool `json:"success"` // 操作是否成功
}

// 取消关注请求
type DeleteUserFollowReq {
    UserId int64 `json:"user_id"`         // 取消关注者ID
    FollowedId int64 `json:"followed_id"` // 被取消关注者ID
}

type DeleteUserFollowResp {
    Success bool `json:"success"` // 操作是否成功
}

// 获取用户关注列表请求
type GetUserFollowsReq {
    UserId int64 `json:"user_id"` // 用户ID
    Page int32 `json:"page"`      // 页码
    PageSize int32 `json:"page_size"` // 每页数量
}

type GetUserFollowsResp {
    Total int64 `json:"total"`           // 总数
    List []UserFollowInfo `json:"list"`  // 关注列表
}

// 获取用户粉丝列表请求
type GetUserFansReq {
    UserId int64 `json:"user_id"` // 用户ID
    Page int32 `json:"page"`      // 页码
    PageSize int32 `json:"page_size"` // 每页数量
}

type GetUserFansResp {
    Total int64 `json:"total"`          // 总数
    List []UserFollowInfo `json:"list"` // 粉丝列表
}

// 检查是否关注请求
type IsUserFollowedReq {
    UserId int64 `json:"user_id"`         // 关注者ID
    FollowedId int64 `json:"followed_id"` // 被关注者ID
}

type IsUserFollowedResp {
    IsFollowed bool `json:"is_followed"` // 是否已关注
}

// 获取互相关注列表请求
type GetMutualFollowsReq {
    UserId int64 `json:"user_id"` // 用户ID
}

type GetMutualFollowsResp {
    Total int64 `json:"total"`           // 总数
    List []UserFollowInfo `json:"list"`  // 互相关注列表
}

type UserFollowInfo {
    UserId int64 `json:"user_id"` // 用户ID
    Username string `json:"username"` // 用户名
    Avatar string `json:"avatar"` // 头像
}

type HealthResponse {
	Response
}

@server (
	prefix: /api/user_follow
)
service UserFollow {
	@doc(
		summary: "健康检查"
	)
	@handler Health
	get /health returns (HealthResponse)

    @doc(
        summary: "创建关注关系"
    )
    post /create_user_follow (CreateUserFollowReq) returns (CreateUserFollowResp)

    @doc(
        summary: "取消关注"
    )
    post /delete_user_follow (DeleteUserFollowReq) returns (DeleteUserFollowResp)

    @doc(   
        summary: "获取用户关注列表"
    )
    post /get_user_follows (GetUserFollowsReq) returns (GetUserFollowsResp)

    @doc(
        summary: "获取用户粉丝列表"
    )
    post /get_user_fans (GetUserFansReq) returns (GetUserFansResp)

    @doc(
        summary: "检查是否关注"
    )
    post /is_user_followed (IsUserFollowedReq) returns (IsUserFollowedResp)
}