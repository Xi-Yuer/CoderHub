// goctl rpc protoc user_follow.proto --go_out=../ --go-grpc_out=../ --zrpc_out=../

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: user_follow.proto

package user_follow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserFollowService_CreateUserFollow_FullMethodName = "/user_follow.UserFollowService/CreateUserFollow"
	UserFollowService_DeleteUserFollow_FullMethodName = "/user_follow.UserFollowService/DeleteUserFollow"
	UserFollowService_GetUserFollows_FullMethodName   = "/user_follow.UserFollowService/GetUserFollows"
	UserFollowService_GetUserFans_FullMethodName      = "/user_follow.UserFollowService/GetUserFans"
	UserFollowService_IsUserFollowed_FullMethodName   = "/user_follow.UserFollowService/IsUserFollowed"
	UserFollowService_GetMutualFollows_FullMethodName = "/user_follow.UserFollowService/GetMutualFollows"
)

// UserFollowServiceClient is the client API for UserFollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFollowServiceClient interface {
	// 创建用户关注关系
	CreateUserFollow(ctx context.Context, in *CreateUserFollowReq, opts ...grpc.CallOption) (*CreateUserFollowResp, error)
	// 删除用户关注关系
	DeleteUserFollow(ctx context.Context, in *DeleteUserFollowReq, opts ...grpc.CallOption) (*DeleteUserFollowResp, error)
	// 获取用户关注列表
	GetUserFollows(ctx context.Context, in *GetUserFollowsReq, opts ...grpc.CallOption) (*GetUserFollowsResp, error)
	// 获取用户粉丝列表
	GetUserFans(ctx context.Context, in *GetUserFansReq, opts ...grpc.CallOption) (*GetUserFansResp, error)
	// 检查是否关注
	IsUserFollowed(ctx context.Context, in *IsUserFollowedReq, opts ...grpc.CallOption) (*IsUserFollowedResp, error)
	// 获取互相关注列表
	GetMutualFollows(ctx context.Context, in *GetMutualFollowsReq, opts ...grpc.CallOption) (*GetMutualFollowsResp, error)
}

type userFollowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFollowServiceClient(cc grpc.ClientConnInterface) UserFollowServiceClient {
	return &userFollowServiceClient{cc}
}

func (c *userFollowServiceClient) CreateUserFollow(ctx context.Context, in *CreateUserFollowReq, opts ...grpc.CallOption) (*CreateUserFollowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserFollowResp)
	err := c.cc.Invoke(ctx, UserFollowService_CreateUserFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) DeleteUserFollow(ctx context.Context, in *DeleteUserFollowReq, opts ...grpc.CallOption) (*DeleteUserFollowResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserFollowResp)
	err := c.cc.Invoke(ctx, UserFollowService_DeleteUserFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) GetUserFollows(ctx context.Context, in *GetUserFollowsReq, opts ...grpc.CallOption) (*GetUserFollowsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFollowsResp)
	err := c.cc.Invoke(ctx, UserFollowService_GetUserFollows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) GetUserFans(ctx context.Context, in *GetUserFansReq, opts ...grpc.CallOption) (*GetUserFansResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserFansResp)
	err := c.cc.Invoke(ctx, UserFollowService_GetUserFans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) IsUserFollowed(ctx context.Context, in *IsUserFollowedReq, opts ...grpc.CallOption) (*IsUserFollowedResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsUserFollowedResp)
	err := c.cc.Invoke(ctx, UserFollowService_IsUserFollowed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) GetMutualFollows(ctx context.Context, in *GetMutualFollowsReq, opts ...grpc.CallOption) (*GetMutualFollowsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMutualFollowsResp)
	err := c.cc.Invoke(ctx, UserFollowService_GetMutualFollows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFollowServiceServer is the server API for UserFollowService service.
// All implementations must embed UnimplementedUserFollowServiceServer
// for forward compatibility.
type UserFollowServiceServer interface {
	// 创建用户关注关系
	CreateUserFollow(context.Context, *CreateUserFollowReq) (*CreateUserFollowResp, error)
	// 删除用户关注关系
	DeleteUserFollow(context.Context, *DeleteUserFollowReq) (*DeleteUserFollowResp, error)
	// 获取用户关注列表
	GetUserFollows(context.Context, *GetUserFollowsReq) (*GetUserFollowsResp, error)
	// 获取用户粉丝列表
	GetUserFans(context.Context, *GetUserFansReq) (*GetUserFansResp, error)
	// 检查是否关注
	IsUserFollowed(context.Context, *IsUserFollowedReq) (*IsUserFollowedResp, error)
	// 获取互相关注列表
	GetMutualFollows(context.Context, *GetMutualFollowsReq) (*GetMutualFollowsResp, error)
	mustEmbedUnimplementedUserFollowServiceServer()
}

// UnimplementedUserFollowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserFollowServiceServer struct{}

func (UnimplementedUserFollowServiceServer) CreateUserFollow(context.Context, *CreateUserFollowReq) (*CreateUserFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFollow not implemented")
}
func (UnimplementedUserFollowServiceServer) DeleteUserFollow(context.Context, *DeleteUserFollowReq) (*DeleteUserFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFollow not implemented")
}
func (UnimplementedUserFollowServiceServer) GetUserFollows(context.Context, *GetUserFollowsReq) (*GetUserFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollows not implemented")
}
func (UnimplementedUserFollowServiceServer) GetUserFans(context.Context, *GetUserFansReq) (*GetUserFansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFans not implemented")
}
func (UnimplementedUserFollowServiceServer) IsUserFollowed(context.Context, *IsUserFollowedReq) (*IsUserFollowedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserFollowed not implemented")
}
func (UnimplementedUserFollowServiceServer) GetMutualFollows(context.Context, *GetMutualFollowsReq) (*GetMutualFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMutualFollows not implemented")
}
func (UnimplementedUserFollowServiceServer) mustEmbedUnimplementedUserFollowServiceServer() {}
func (UnimplementedUserFollowServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFollowServiceServer will
// result in compilation errors.
type UnsafeUserFollowServiceServer interface {
	mustEmbedUnimplementedUserFollowServiceServer()
}

func RegisterUserFollowServiceServer(s grpc.ServiceRegistrar, srv UserFollowServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserFollowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserFollowService_ServiceDesc, srv)
}

func _UserFollowService_CreateUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).CreateUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_CreateUserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).CreateUserFollow(ctx, req.(*CreateUserFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_DeleteUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).DeleteUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_DeleteUserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).DeleteUserFollow(ctx, req.(*DeleteUserFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_GetUserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).GetUserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_GetUserFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).GetUserFollows(ctx, req.(*GetUserFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_GetUserFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).GetUserFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_GetUserFans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).GetUserFans(ctx, req.(*GetUserFansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_IsUserFollowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserFollowedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).IsUserFollowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_IsUserFollowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).IsUserFollowed(ctx, req.(*IsUserFollowedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_GetMutualFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMutualFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).GetMutualFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_GetMutualFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).GetMutualFollows(ctx, req.(*GetMutualFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFollowService_ServiceDesc is the grpc.ServiceDesc for UserFollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_follow.UserFollowService",
	HandlerType: (*UserFollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserFollow",
			Handler:    _UserFollowService_CreateUserFollow_Handler,
		},
		{
			MethodName: "DeleteUserFollow",
			Handler:    _UserFollowService_DeleteUserFollow_Handler,
		},
		{
			MethodName: "GetUserFollows",
			Handler:    _UserFollowService_GetUserFollows_Handler,
		},
		{
			MethodName: "GetUserFans",
			Handler:    _UserFollowService_GetUserFans_Handler,
		},
		{
			MethodName: "IsUserFollowed",
			Handler:    _UserFollowService_IsUserFollowed_Handler,
		},
		{
			MethodName: "GetMutualFollows",
			Handler:    _UserFollowService_GetMutualFollows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_follow.proto",
}
