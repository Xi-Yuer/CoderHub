// goctl rpc protoc user_follow.proto --go_out=../ --go-grpc_out=../ --zrpc_out=../
syntax = "proto3";

package user_follow;
option go_package = "./user_follow";

service UserFollowService {
  // 创建用户关注关系
  rpc CreateUserFollow(CreateUserFollowReq) returns (CreateUserFollowResp);
  // 删除用户关注关系
  rpc DeleteUserFollow(DeleteUserFollowReq) returns (DeleteUserFollowResp);
  // 获取用户关注列表
  rpc GetUserFollows(GetUserFollowsReq) returns (GetUserFollowsResp);
  // 获取用户粉丝列表
  rpc GetUserFans(GetUserFansReq) returns (GetUserFansResp);
  // 检查是否关注
  rpc IsUserFollowed(IsUserFollowedReq) returns (IsUserFollowedResp);
  // 获取互相关注列表
  rpc GetMutualFollows(GetMutualFollowsReq) returns (GetMutualFollowsResp);
}

// 创建关注请求
message CreateUserFollowReq {
  int64 follower_id = 1;  // 关注者ID
  int64 followed_id = 2;  // 被关注者ID
}

message CreateUserFollowResp {
  bool success = 1;
}

// 取消关注请求
message DeleteUserFollowReq {
  int64 follower_id = 1;
  int64 followed_id = 2;
}

message DeleteUserFollowResp {
  bool success = 1;
}

// 获取关注列表请求
message GetUserFollowsReq {
  int64 follower_id = 1;
  int32 page = 2;
  int32 page_size = 3;
}

message GetUserFollowsResp {
  repeated UserInfo user_follows = 1;
  int64 total = 2;
}

// 获取粉丝列表请求
message GetUserFansReq {
  int64 followed_id = 1;
  int32 page = 2;
  int32 page_size = 3;
}

message GetUserFansResp {
  repeated UserInfo user_fans = 1;
  int64 total = 2;
}

// 检查关注状态请求
message IsUserFollowedReq {
  int64 follower_id = 1;
  int64 followed_id = 2;
}

message IsUserFollowedResp {
  bool is_followed = 1;
}

// 获取互关列表请求
message GetMutualFollowsReq {
  int64 user_id = 1;
  int32 page = 2;
  int32 page_size = 3;
}

message GetMutualFollowsResp {
  repeated UserInfo mutual_follows = 1;
  int64 total = 2;
}

message UserInfo {
  int64 id = 1;
  string username = 2;
  string avatar = 3;
}