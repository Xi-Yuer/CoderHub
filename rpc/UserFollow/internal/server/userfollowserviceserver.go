// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user_follow.proto

package server

import (
	"context"

	"coderhub/rpc/UserFollow/internal/logic"
	"coderhub/rpc/UserFollow/internal/svc"
	"coderhub/rpc/UserFollow/user_follow"
)

type UserFollowServiceServer struct {
	svcCtx *svc.ServiceContext
	user_follow.UnimplementedUserFollowServiceServer
}

func NewUserFollowServiceServer(svcCtx *svc.ServiceContext) *UserFollowServiceServer {
	return &UserFollowServiceServer{
		svcCtx: svcCtx,
	}
}

// 创建用户关注关系
func (s *UserFollowServiceServer) CreateUserFollow(ctx context.Context, in *user_follow.CreateUserFollowReq) (*user_follow.CreateUserFollowResp, error) {
	l := logic.NewCreateUserFollowLogic(ctx, s.svcCtx)
	return l.CreateUserFollow(in)
}

// 删除用户关注关系
func (s *UserFollowServiceServer) DeleteUserFollow(ctx context.Context, in *user_follow.DeleteUserFollowReq) (*user_follow.DeleteUserFollowResp, error) {
	l := logic.NewDeleteUserFollowLogic(ctx, s.svcCtx)
	return l.DeleteUserFollow(in)
}

// 获取用户关注列表
func (s *UserFollowServiceServer) GetUserFollows(ctx context.Context, in *user_follow.GetUserFollowsReq) (*user_follow.GetUserFollowsResp, error) {
	l := logic.NewGetUserFollowsLogic(ctx, s.svcCtx)
	return l.GetUserFollows(in)
}

// 获取用户粉丝列表
func (s *UserFollowServiceServer) GetUserFans(ctx context.Context, in *user_follow.GetUserFansReq) (*user_follow.GetUserFansResp, error) {
	l := logic.NewGetUserFansLogic(ctx, s.svcCtx)
	return l.GetUserFans(in)
}

// 检查是否关注
func (s *UserFollowServiceServer) IsUserFollowed(ctx context.Context, in *user_follow.IsUserFollowedReq) (*user_follow.IsUserFollowedResp, error) {
	l := logic.NewIsUserFollowedLogic(ctx, s.svcCtx)
	return l.IsUserFollowed(in)
}

// 获取互相关注列表
func (s *UserFollowServiceServer) GetMutualFollows(ctx context.Context, in *user_follow.GetMutualFollowsReq) (*user_follow.GetMutualFollowsResp, error) {
	l := logic.NewGetMutualFollowsLogic(ctx, s.svcCtx)
	return l.GetMutualFollows(in)
}
