// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: coderhub.proto

package server

import (
	"context"

	"coderhub/rpc/coderhub/coderhub"
	"coderhub/rpc/coderhub/internal/logic/userfollowservice"
	"coderhub/rpc/coderhub/internal/svc"
)

type UserFollowServiceServer struct {
	svcCtx *svc.ServiceContext
	coderhub.UnimplementedUserFollowServiceServer
}

func NewUserFollowServiceServer(svcCtx *svc.ServiceContext) *UserFollowServiceServer {
	return &UserFollowServiceServer{
		svcCtx: svcCtx,
	}
}

// 创建用户关注关系
func (s *UserFollowServiceServer) CreateUserFollow(ctx context.Context, in *coderhub.CreateUserFollowReq) (*coderhub.CreateUserFollowResp, error) {
	l := userfollowservicelogic.NewCreateUserFollowLogic(ctx, s.svcCtx)
	return l.CreateUserFollow(in)
}

// 删除用户关注关系
func (s *UserFollowServiceServer) DeleteUserFollow(ctx context.Context, in *coderhub.DeleteUserFollowReq) (*coderhub.DeleteUserFollowResp, error) {
	l := userfollowservicelogic.NewDeleteUserFollowLogic(ctx, s.svcCtx)
	return l.DeleteUserFollow(in)
}

// 获取用户关注列表
func (s *UserFollowServiceServer) GetUserFollows(ctx context.Context, in *coderhub.GetUserFollowsReq) (*coderhub.GetUserFollowsResp, error) {
	l := userfollowservicelogic.NewGetUserFollowsLogic(ctx, s.svcCtx)
	return l.GetUserFollows(in)
}

// 获取用户粉丝列表
func (s *UserFollowServiceServer) GetUserFans(ctx context.Context, in *coderhub.GetUserFansReq) (*coderhub.GetUserFansResp, error) {
	l := userfollowservicelogic.NewGetUserFansLogic(ctx, s.svcCtx)
	return l.GetUserFans(in)
}

// 检查是否关注
func (s *UserFollowServiceServer) IsUserFollowed(ctx context.Context, in *coderhub.IsUserFollowedReq) (*coderhub.IsUserFollowedResp, error) {
	l := userfollowservicelogic.NewIsUserFollowedLogic(ctx, s.svcCtx)
	return l.IsUserFollowed(in)
}

// 获取互相关注列表
func (s *UserFollowServiceServer) GetMutualFollows(ctx context.Context, in *coderhub.GetMutualFollowsReq) (*coderhub.GetMutualFollowsResp, error) {
	l := userfollowservicelogic.NewGetMutualFollowsLogic(ctx, s.svcCtx)
	return l.GetMutualFollows(in)
}
