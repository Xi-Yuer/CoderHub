// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: coderhub.proto

package server

import (
	"context"

	"coderhub/rpc/coderhub/coderhub"
	"coderhub/rpc/coderhub/internal/logic/userservice"
	"coderhub/rpc/coderhub/internal/svc"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	coderhub.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// 授权
func (s *UserServiceServer) Authorize(ctx context.Context, in *coderhub.AuthorizeRequest) (*coderhub.AuthorizeResponse, error) {
	l := userservicelogic.NewAuthorizeLogic(ctx, s.svcCtx)
	return l.Authorize(in)
}

// 检查用户是否存在
func (s *UserServiceServer) CheckUserExists(ctx context.Context, in *coderhub.CheckUserExistsRequest) (*coderhub.CheckUserExistsResponse, error) {
	l := userservicelogic.NewCheckUserExistsLogic(ctx, s.svcCtx)
	return l.CheckUserExists(in)
}

// 创建用户
func (s *UserServiceServer) CreateUser(ctx context.Context, in *coderhub.CreateUserRequest) (*coderhub.CreateUserResponse, error) {
	l := userservicelogic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

// 获取用户信息
func (s *UserServiceServer) GetUserInfo(ctx context.Context, in *coderhub.GetUserInfoRequest) (*coderhub.GetUserInfoResponse, error) {
	l := userservicelogic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserServiceServer) GetUserInfoByUsername(ctx context.Context, in *coderhub.GetUserInfoByUsernameRequest) (*coderhub.GetUserInfoResponse, error) {
	l := userservicelogic.NewGetUserInfoByUsernameLogic(ctx, s.svcCtx)
	return l.GetUserInfoByUsername(in)
}

// 批量获取用户信息
func (s *UserServiceServer) BatchGetUserByID(ctx context.Context, in *coderhub.BatchGetUserByIDRequest) (*coderhub.BatchGetUserByIDResponse, error) {
	l := userservicelogic.NewBatchGetUserByIDLogic(ctx, s.svcCtx)
	return l.BatchGetUserByID(in)
}

// 更新用户信息
func (s *UserServiceServer) UpdateUserInfo(ctx context.Context, in *coderhub.UpdateUserInfoRequest) (*coderhub.UpdateUserInfoResponse, error) {
	l := userservicelogic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

// 上传用户头像
func (s *UserServiceServer) UploadAvatar(ctx context.Context, in *coderhub.UploadAvatarRequest) (*coderhub.UploadAvatarResponse, error) {
	l := userservicelogic.NewUploadAvatarLogic(ctx, s.svcCtx)
	return l.UploadAvatar(in)
}

// 修改密码
func (s *UserServiceServer) ChangePassword(ctx context.Context, in *coderhub.ChangePasswordRequest) (*coderhub.ChangePasswordResponse, error) {
	l := userservicelogic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

// 重置密码, 通过邮箱发送重置密码链接
func (s *UserServiceServer) ResetPassword(ctx context.Context, in *coderhub.ResetPasswordRequest) (*coderhub.ResetPasswordResponse, error) {
	l := userservicelogic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

// 通过链接重置密码
func (s *UserServiceServer) ResetPasswordByLink(ctx context.Context, in *coderhub.ResetPasswordByLinkRequest) (*coderhub.ResetPasswordByLinkResponse, error) {
	l := userservicelogic.NewResetPasswordByLinkLogic(ctx, s.svcCtx)
	return l.ResetPasswordByLink(in)
}

// 删除用户
func (s *UserServiceServer) DeleteUser(ctx context.Context, in *coderhub.DeleteUserRequest) (*coderhub.DeleteUserResponse, error) {
	l := userservicelogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}
