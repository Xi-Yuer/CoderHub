// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: coderhub.proto

package server

import (
	"context"

	"coderhub/rpc/coderhub/coderhub"
	"coderhub/rpc/coderhub/internal/logic/questionservice"
	"coderhub/rpc/coderhub/internal/svc"
)

type QuestionServiceServer struct {
	svcCtx *svc.ServiceContext
	coderhub.UnimplementedQuestionServiceServer
}

func NewQuestionServiceServer(svcCtx *svc.ServiceContext) *QuestionServiceServer {
	return &QuestionServiceServer{
		svcCtx: svcCtx,
	}
}

// 创建题库
func (s *QuestionServiceServer) CreateQuestionBank(ctx context.Context, in *coderhub.CreateQuestionBankRequest) (*coderhub.CreateQuestionBankResponse, error) {
	l := questionservicelogic.NewCreateQuestionBankLogic(ctx, s.svcCtx)
	return l.CreateQuestionBank(in)
}

// 删除题库
func (s *QuestionServiceServer) DeleteQuestionBank(ctx context.Context, in *coderhub.DeleteQuestionBankRequest) (*coderhub.DeleteQuestionBankResponse, error) {
	l := questionservicelogic.NewDeleteQuestionBankLogic(ctx, s.svcCtx)
	return l.DeleteQuestionBank(in)
}

// 创建题目
func (s *QuestionServiceServer) CreateQuestion(ctx context.Context, in *coderhub.CreateQuestionRequest) (*coderhub.CreateQuestionResponse, error) {
	l := questionservicelogic.NewCreateQuestionLogic(ctx, s.svcCtx)
	return l.CreateQuestion(in)
}

// 删除题目
func (s *QuestionServiceServer) DeleteQuestion(ctx context.Context, in *coderhub.DeleteQuestionRequest) (*coderhub.DeleteQuestionResponse, error) {
	l := questionservicelogic.NewDeleteQuestionLogic(ctx, s.svcCtx)
	return l.DeleteQuestion(in)
}

// 获取题库列表
func (s *QuestionServiceServer) GetQuestionBankList(ctx context.Context, in *coderhub.GetQuestionBankListRequest) (*coderhub.GetQuestionBankListResponse, error) {
	l := questionservicelogic.NewGetQuestionBankListLogic(ctx, s.svcCtx)
	return l.GetQuestionBankList(in)
}

// 获取题库下的所有题目目录
func (s *QuestionServiceServer) GetQuestionTree(ctx context.Context, in *coderhub.GetQuestionTreeRequest) (*coderhub.GetQuestionTreeResponse, error) {
	l := questionservicelogic.NewGetQuestionTreeLogic(ctx, s.svcCtx)
	return l.GetQuestionTree(in)
}

// 获取题目详情
func (s *QuestionServiceServer) GetQuestion(ctx context.Context, in *coderhub.GetQuestionRequest) (*coderhub.GetQuestionResponse, error) {
	l := questionservicelogic.NewGetQuestionLogic(ctx, s.svcCtx)
	return l.GetQuestion(in)
}
