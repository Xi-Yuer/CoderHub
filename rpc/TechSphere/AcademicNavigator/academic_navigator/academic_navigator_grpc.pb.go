// goctl rpc protoc academic_navigator.proto --go_out=../ --go-grpc_out=../ --zrpc_out=../

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: academic_navigator.proto

package academic_navigator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AcademicNavigatorService_AddAcademicNavigator_FullMethodName    = "/academic_navigator.AcademicNavigatorService/AddAcademicNavigator"
	AcademicNavigatorService_GetAcademicNavigator_FullMethodName    = "/academic_navigator.AcademicNavigatorService/GetAcademicNavigator"
	AcademicNavigatorService_DeleteAcademicNavigator_FullMethodName = "/academic_navigator.AcademicNavigatorService/DeleteAcademicNavigator"
)

// AcademicNavigatorServiceClient is the client API for AcademicNavigatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcademicNavigatorServiceClient interface {
	// 新增学术导航
	AddAcademicNavigator(ctx context.Context, in *AddAcademicNavigatorRequest, opts ...grpc.CallOption) (*Response, error)
	// 获取学术导航
	GetAcademicNavigator(ctx context.Context, in *GetAcademicNavigatorRequest, opts ...grpc.CallOption) (*Response, error)
	// 删除学术导航
	DeleteAcademicNavigator(ctx context.Context, in *DeleteAcademicNavigatorRequest, opts ...grpc.CallOption) (*Response, error)
}

type academicNavigatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAcademicNavigatorServiceClient(cc grpc.ClientConnInterface) AcademicNavigatorServiceClient {
	return &academicNavigatorServiceClient{cc}
}

func (c *academicNavigatorServiceClient) AddAcademicNavigator(ctx context.Context, in *AddAcademicNavigatorRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AcademicNavigatorService_AddAcademicNavigator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicNavigatorServiceClient) GetAcademicNavigator(ctx context.Context, in *GetAcademicNavigatorRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AcademicNavigatorService_GetAcademicNavigator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicNavigatorServiceClient) DeleteAcademicNavigator(ctx context.Context, in *DeleteAcademicNavigatorRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AcademicNavigatorService_DeleteAcademicNavigator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcademicNavigatorServiceServer is the server API for AcademicNavigatorService service.
// All implementations must embed UnimplementedAcademicNavigatorServiceServer
// for forward compatibility.
type AcademicNavigatorServiceServer interface {
	// 新增学术导航
	AddAcademicNavigator(context.Context, *AddAcademicNavigatorRequest) (*Response, error)
	// 获取学术导航
	GetAcademicNavigator(context.Context, *GetAcademicNavigatorRequest) (*Response, error)
	// 删除学术导航
	DeleteAcademicNavigator(context.Context, *DeleteAcademicNavigatorRequest) (*Response, error)
	mustEmbedUnimplementedAcademicNavigatorServiceServer()
}

// UnimplementedAcademicNavigatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAcademicNavigatorServiceServer struct{}

func (UnimplementedAcademicNavigatorServiceServer) AddAcademicNavigator(context.Context, *AddAcademicNavigatorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAcademicNavigator not implemented")
}
func (UnimplementedAcademicNavigatorServiceServer) GetAcademicNavigator(context.Context, *GetAcademicNavigatorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcademicNavigator not implemented")
}
func (UnimplementedAcademicNavigatorServiceServer) DeleteAcademicNavigator(context.Context, *DeleteAcademicNavigatorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcademicNavigator not implemented")
}
func (UnimplementedAcademicNavigatorServiceServer) mustEmbedUnimplementedAcademicNavigatorServiceServer() {
}
func (UnimplementedAcademicNavigatorServiceServer) testEmbeddedByValue() {}

// UnsafeAcademicNavigatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcademicNavigatorServiceServer will
// result in compilation errors.
type UnsafeAcademicNavigatorServiceServer interface {
	mustEmbedUnimplementedAcademicNavigatorServiceServer()
}

func RegisterAcademicNavigatorServiceServer(s grpc.ServiceRegistrar, srv AcademicNavigatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAcademicNavigatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AcademicNavigatorService_ServiceDesc, srv)
}

func _AcademicNavigatorService_AddAcademicNavigator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAcademicNavigatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicNavigatorServiceServer).AddAcademicNavigator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicNavigatorService_AddAcademicNavigator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicNavigatorServiceServer).AddAcademicNavigator(ctx, req.(*AddAcademicNavigatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicNavigatorService_GetAcademicNavigator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcademicNavigatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicNavigatorServiceServer).GetAcademicNavigator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicNavigatorService_GetAcademicNavigator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicNavigatorServiceServer).GetAcademicNavigator(ctx, req.(*GetAcademicNavigatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicNavigatorService_DeleteAcademicNavigator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAcademicNavigatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicNavigatorServiceServer).DeleteAcademicNavigator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicNavigatorService_DeleteAcademicNavigator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicNavigatorServiceServer).DeleteAcademicNavigator(ctx, req.(*DeleteAcademicNavigatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AcademicNavigatorService_ServiceDesc is the grpc.ServiceDesc for AcademicNavigatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcademicNavigatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academic_navigator.AcademicNavigatorService",
	HandlerType: (*AcademicNavigatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAcademicNavigator",
			Handler:    _AcademicNavigatorService_AddAcademicNavigator_Handler,
		},
		{
			MethodName: "GetAcademicNavigator",
			Handler:    _AcademicNavigatorService_GetAcademicNavigator_Handler,
		},
		{
			MethodName: "DeleteAcademicNavigator",
			Handler:    _AcademicNavigatorService_DeleteAcademicNavigator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academic_navigator.proto",
}
