// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: articles.proto

package articleservice

import (
	"context"

	"coderhub/rpc/TechSphere/Articles/articles"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Article               = articles.Article
	CreateArticleRequest  = articles.CreateArticleRequest
	CreateArticleResponse = articles.CreateArticleResponse
	DeleteArticleRequest  = articles.DeleteArticleRequest
	DeleteArticleResponse = articles.DeleteArticleResponse
	GetArticleRequest     = articles.GetArticleRequest
	GetArticleResponse    = articles.GetArticleResponse
	Image                 = articles.Image
	UpdateArticleRequest  = articles.UpdateArticleRequest
	UpdateArticleResponse = articles.UpdateArticleResponse

	ArticleService interface {
		GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error)
		CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error)
		UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error)
		DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error)
	}

	defaultArticleService struct {
		cli zrpc.Client
	}
)

func NewArticleService(cli zrpc.Client) ArticleService {
	return &defaultArticleService{
		cli: cli,
	}
}

func (m *defaultArticleService) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error) {
	client := articles.NewArticleServiceClient(m.cli.Conn())
	return client.GetArticle(ctx, in, opts...)
}

func (m *defaultArticleService) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*CreateArticleResponse, error) {
	client := articles.NewArticleServiceClient(m.cli.Conn())
	return client.CreateArticle(ctx, in, opts...)
}

func (m *defaultArticleService) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleResponse, error) {
	client := articles.NewArticleServiceClient(m.cli.Conn())
	return client.UpdateArticle(ctx, in, opts...)
}

func (m *defaultArticleService) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error) {
	client := articles.NewArticleServiceClient(m.cli.Conn())
	return client.DeleteArticle(ctx, in, opts...)
}
