// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package server

import (
	"context"

	"coderhub/rpc/User/internal/logic"
	"coderhub/rpc/User/internal/svc"
	"coderhub/rpc/User/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

// 授权
func (s *UserServiceServer) Authorize(ctx context.Context, in *user.AuthorizeRequest) (*user.AuthorizeResponse, error) {
	l := logic.NewAuthorizeLogic(ctx, s.svcCtx)
	return l.Authorize(in)
}

// 检查用户是否存在
func (s *UserServiceServer) CheckUserExists(ctx context.Context, in *user.CheckUserExistsRequest) (*user.CheckUserExistsResponse, error) {
	l := logic.NewCheckUserExistsLogic(ctx, s.svcCtx)
	return l.CheckUserExists(in)
}

// 创建用户
func (s *UserServiceServer) CreateUser(ctx context.Context, in *user.CreateUserRequest) (*user.CreateUserResponse, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

// 获取用户信息
func (s *UserServiceServer) GetUserInfo(ctx context.Context, in *user.GetUserInfoRequest) (*user.GetUserInfoResponse, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserServiceServer) GetUserInfoByUsername(ctx context.Context, in *user.GetUserInfoByUsernameRequest) (*user.GetUserInfoResponse, error) {
	l := logic.NewGetUserInfoByUsernameLogic(ctx, s.svcCtx)
	return l.GetUserInfoByUsername(in)
}

// 更新用户信息
func (s *UserServiceServer) UpdateUserInfo(ctx context.Context, in *user.UpdateUserInfoRequest) (*user.UpdateUserInfoResponse, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

// 修改密码
func (s *UserServiceServer) ChangePassword(ctx context.Context, in *user.ChangePasswordRequest) (*user.ChangePasswordResponse, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

// 重置密码
func (s *UserServiceServer) ResetPassword(ctx context.Context, in *user.ResetPasswordRequest) (*user.ResetPasswordResponse, error) {
	l := logic.NewResetPasswordLogic(ctx, s.svcCtx)
	return l.ResetPassword(in)
}

// 删除用户
func (s *UserServiceServer) DeleteUser(ctx context.Context, in *user.DeleteUserRequest) (*user.DeleteUserResponse, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}
