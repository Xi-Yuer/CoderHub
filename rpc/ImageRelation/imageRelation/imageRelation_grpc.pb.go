// goctl rpc protoc imageRelation.proto --go_out=../ --go-grpc_out=../ --zrpc_out=../

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: imageRelation.proto

package imageRelation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageRelationService_CreateRelation_FullMethodName      = "/imageRelation.ImageRelationService/CreateRelation"
	ImageRelationService_BatchCreateRelation_FullMethodName = "/imageRelation.ImageRelationService/BatchCreateRelation"
	ImageRelationService_GetImagesByEntity_FullMethodName   = "/imageRelation.ImageRelationService/GetImagesByEntity"
	ImageRelationService_GetEntitiesByImage_FullMethodName  = "/imageRelation.ImageRelationService/GetEntitiesByImage"
)

// ImageRelationServiceClient is the client API for ImageRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 图片关系服务
type ImageRelationServiceClient interface {
	// 创建图片关系
	CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error)
	// 批量创建图片关系
	BatchCreateRelation(ctx context.Context, in *BatchCreateRelationRequest, opts ...grpc.CallOption) (*BatchCreateRelationResponse, error)
	// 获取实体关联的图片列表
	GetImagesByEntity(ctx context.Context, in *GetImagesByEntityRequest, opts ...grpc.CallOption) (*GetImagesByEntityResponse, error)
	// 获取图片关联的实体列表
	GetEntitiesByImage(ctx context.Context, in *GetEntitiesByImageRequest, opts ...grpc.CallOption) (*GetEntitiesByImageResponse, error)
}

type imageRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageRelationServiceClient(cc grpc.ClientConnInterface) ImageRelationServiceClient {
	return &imageRelationServiceClient{cc}
}

func (c *imageRelationServiceClient) CreateRelation(ctx context.Context, in *CreateRelationRequest, opts ...grpc.CallOption) (*CreateRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRelationResponse)
	err := c.cc.Invoke(ctx, ImageRelationService_CreateRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRelationServiceClient) BatchCreateRelation(ctx context.Context, in *BatchCreateRelationRequest, opts ...grpc.CallOption) (*BatchCreateRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateRelationResponse)
	err := c.cc.Invoke(ctx, ImageRelationService_BatchCreateRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRelationServiceClient) GetImagesByEntity(ctx context.Context, in *GetImagesByEntityRequest, opts ...grpc.CallOption) (*GetImagesByEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImagesByEntityResponse)
	err := c.cc.Invoke(ctx, ImageRelationService_GetImagesByEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRelationServiceClient) GetEntitiesByImage(ctx context.Context, in *GetEntitiesByImageRequest, opts ...grpc.CallOption) (*GetEntitiesByImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntitiesByImageResponse)
	err := c.cc.Invoke(ctx, ImageRelationService_GetEntitiesByImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageRelationServiceServer is the server API for ImageRelationService service.
// All implementations must embed UnimplementedImageRelationServiceServer
// for forward compatibility.
//
// 图片关系服务
type ImageRelationServiceServer interface {
	// 创建图片关系
	CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error)
	// 批量创建图片关系
	BatchCreateRelation(context.Context, *BatchCreateRelationRequest) (*BatchCreateRelationResponse, error)
	// 获取实体关联的图片列表
	GetImagesByEntity(context.Context, *GetImagesByEntityRequest) (*GetImagesByEntityResponse, error)
	// 获取图片关联的实体列表
	GetEntitiesByImage(context.Context, *GetEntitiesByImageRequest) (*GetEntitiesByImageResponse, error)
	mustEmbedUnimplementedImageRelationServiceServer()
}

// UnimplementedImageRelationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageRelationServiceServer struct{}

func (UnimplementedImageRelationServiceServer) CreateRelation(context.Context, *CreateRelationRequest) (*CreateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelation not implemented")
}
func (UnimplementedImageRelationServiceServer) BatchCreateRelation(context.Context, *BatchCreateRelationRequest) (*BatchCreateRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateRelation not implemented")
}
func (UnimplementedImageRelationServiceServer) GetImagesByEntity(context.Context, *GetImagesByEntityRequest) (*GetImagesByEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesByEntity not implemented")
}
func (UnimplementedImageRelationServiceServer) GetEntitiesByImage(context.Context, *GetEntitiesByImageRequest) (*GetEntitiesByImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitiesByImage not implemented")
}
func (UnimplementedImageRelationServiceServer) mustEmbedUnimplementedImageRelationServiceServer() {}
func (UnimplementedImageRelationServiceServer) testEmbeddedByValue()                              {}

// UnsafeImageRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageRelationServiceServer will
// result in compilation errors.
type UnsafeImageRelationServiceServer interface {
	mustEmbedUnimplementedImageRelationServiceServer()
}

func RegisterImageRelationServiceServer(s grpc.ServiceRegistrar, srv ImageRelationServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageRelationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageRelationService_ServiceDesc, srv)
}

func _ImageRelationService_CreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRelationServiceServer).CreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRelationService_CreateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRelationServiceServer).CreateRelation(ctx, req.(*CreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRelationService_BatchCreateRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRelationServiceServer).BatchCreateRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRelationService_BatchCreateRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRelationServiceServer).BatchCreateRelation(ctx, req.(*BatchCreateRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRelationService_GetImagesByEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesByEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRelationServiceServer).GetImagesByEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRelationService_GetImagesByEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRelationServiceServer).GetImagesByEntity(ctx, req.(*GetImagesByEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRelationService_GetEntitiesByImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesByImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRelationServiceServer).GetEntitiesByImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRelationService_GetEntitiesByImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRelationServiceServer).GetEntitiesByImage(ctx, req.(*GetEntitiesByImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageRelationService_ServiceDesc is the grpc.ServiceDesc for ImageRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imageRelation.ImageRelationService",
	HandlerType: (*ImageRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelation",
			Handler:    _ImageRelationService_CreateRelation_Handler,
		},
		{
			MethodName: "BatchCreateRelation",
			Handler:    _ImageRelationService_BatchCreateRelation_Handler,
		},
		{
			MethodName: "GetImagesByEntity",
			Handler:    _ImageRelationService_GetImagesByEntity_Handler,
		},
		{
			MethodName: "GetEntitiesByImage",
			Handler:    _ImageRelationService_GetEntitiesByImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imageRelation.proto",
}
