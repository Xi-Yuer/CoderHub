services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: coderhub
      MYSQL_ROOT_PASSWORD: 2214380963Wx!!
    ports:
      - "3306:3306"
    networks:
      - coderhub-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - coderhub-network

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: etcd
    networks:
      - coderhub-network
    command: [
      "etcd",
      "--name", "etcd0",
      "--advertise-client-urls", "http://0.0.0.0:2379",
      "--listen-client-urls", "http://0.0.0.0:2379",
      "--initial-advertise-peer-urls", "http://0.0.0.0:2380",
      "--listen-peer-urls", "http://0.0.0.0:2380",
      "--initial-cluster", "etcd0=http://0.0.0.0:2380"
    ]

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      user-service:
        condition: service_healthy
      user-api:
        condition: service_healthy
    networks:
      - coderhub-network
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
        consistency: consistent

  #  Api 服务
  user-api:
    build:
      context: ..
      dockerfile: ./api/user/Dockerfile
    container_name: user-api
    depends_on:
      - etcd
      - mysql
      - redis
      - user-service
    networks:
      - coderhub-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/health" ]  # 修改为实际的健康检查端点
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

  # RPC 服务
  user-service:
    build:
      context: ..
      dockerfile: ./rpc/user/Dockerfile
    container_name: user-service
    depends_on:
      - mysql
      - redis
      - etcd
    networks:
      - coderhub-network
    environment:
      REDIS_HOST: redis  # 使用服务名称作为主机名
      REDIS_PORT: 6379
      ETCD_HOST: etcd
      ETCD_PORT: 2379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8888" ]  # 使用netcat检查端口是否开放
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

networks:
  coderhub-network:
    driver: bridge  # 使用默认的 Docker bridge 网络驱动

volumes:
  etcd-data: