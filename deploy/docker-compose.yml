services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_DATABASE: coderhub
      MYSQL_ROOT_PASSWORD: 2214380963Wx!!
      MYSQL_USER: canal
      MYSQL_PASSWORD: canal
    ports:
      - "3306:3306"
    networks:
      - coderhub-network
    volumes:
      - type: volume
        source: mysql-data
        target: /var/lib/mysql
      - type: bind
        source: ./mysql/conf.d
        target: /etc/mysql/conf.d
        read_only: true
        consistency: consistent
      - type: bind
        source: ./mysql/init.sql
        target: /docker-entrypoint-initdb.d/init.sql
        read_only: true
        consistency: consistent
  canal:
    image: canal/canal-server:latest
    container_name: canal
    depends_on:
      - mysql
    environment:
      CANAL_IP: canal
      CANAL_PORT: 11111
      CANAL_DESTINATIONS: example
      CANAL_INSTANCE_MASTER_ADDRESS: mysql:3306
      CANAL_INSTANCE_DBUSERNAME: canal
      CANAL_INSTANCE_DBPASSWORD: canal
      CANAL_INSTANCE_FILTER_REGEX: "coderhub\\..*"  # 监听 coderhub 数据库下的所有表
      CANAL_INSTANCE_PARSER_PARALLEL: 1
      CANAL_INSTANCE_PARSER_PARALLELTHREADSIZE: 256
    ports:
      - "11111:11111"
    networks:
      - coderhub-network
    volumes:
      - canal-data:/home/admin/canal-server/logs
      - ./canal-adapter/conf:/opt/canal-adapter/conf
  elasticsearch:
    image: elasticsearch:8.11.3
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=2214380963Wx!!  # 设置明确的密码
    volumes:
      - type: volume
        source: es-data
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - coderhub-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - coderhub-network
    volumes:
      - redis-data:/data

  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: etcd
    networks:
      - coderhub-network
    command: [
      "etcd",
      "--name", "etcd0",
      "--advertise-client-urls", "http://0.0.0.0:2379",
      "--listen-client-urls", "http://0.0.0.0:2379",
      "--initial-advertise-peer-urls", "http://0.0.0.0:2380",
      "--listen-peer-urls", "http://0.0.0.0:2380",
      "--initial-cluster", "etcd0=http://0.0.0.0:2380"
    ]

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      user-service:
        condition: service_healthy
      user-api:
        condition: service_healthy
    networks:
      - coderhub-network
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: true
        consistency: consistent

  #  Api 服务
  user-api:
    build:
      context: ..
      dockerfile: ./api/User/Dockerfile
    container_name: user-api
    depends_on:
      - etcd
      - mysql
      - redis
      - user-service
    networks:
      - coderhub-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/api/user/health" ]  # 修改为实际的健康检查端点
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

  articles-api:
    build:
      context: ..
      dockerfile: ./api/TechSphere/Articles/Dockerfile
    container_name: articles-api
    depends_on:
      - etcd
      - mysql
      - redis
      - articles-service
    networks:
      - coderhub-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/api/articles/health" ]  # 修改为实际的健康检查端点
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

  # RPC 服务
  user-service:
    build:
      context: ..
      dockerfile: ./rpc/User/Dockerfile
    container_name: user-service
    depends_on:
      - mysql
      - redis
      - etcd
    networks:
      - coderhub-network
    environment:
      REDIS_HOST: redis  # 使用服务名称作为主机名
      REDIS_PORT: 6379
      ETCD_HOST: etcd
      ETCD_PORT: 2379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8888" ]  # 使用netcat检查端口是否开放
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always

  articles-service:
    build:
      context: ..
      dockerfile: ./rpc/TechSphere/Articles/Dockerfile
    container_name: articles-service
    depends_on:
      - mysql
      - redis
      - etcd
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8888" ]  # 使用netcat检查端口是否开放
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: always
    environment:
      REDIS_HOST: redis  # 使用服务名称作为主机名
      REDIS_PORT: 6379
      ETCD_HOST: etcd
      ETCD_PORT: 2379
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
    networks:
      - coderhub-network

networks:
  coderhub-network:
    driver: bridge  # 使用默认的 Docker bridge 网络驱动

volumes:
  etcd-data:
  mysql-data:
  redis-data:
  canal-data:
  es-data: